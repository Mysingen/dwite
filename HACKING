Dwite is a server that takes care of interaction with a SqueezeBox of the
"classic" generation (i.e. SqueezeBox2 is supported, but not SqueezeBox1).
Note that Dwite does not know how to stream content to a device. It must get
help from a separate content manager that takes care of such things. It also
does not manage the end user's media library and it doesn't provide a host-side
UI for the user. See the bits about Cleo towards the end of this file for an
example of such functionality.

Dwite is written in Python simply because it is such a lovely language. The
intention is to keep it small enough that it can serve as a reference when
rewriting in C, if necessary. Such a rewrite would not appear to be needed
for performance reasons unless you expect it to run well on a 100MHz machine
of the early 90's or something like that. Then again, that might be exactly
the point...

Dependencies
============
PIL - To render bitmaps from TTF fonts and things like that.
Mutagen - To extract media file meta data.

The code is not validated against Python 3.0, but I have avoided things that
I know would break.

Class & module hierarchies
==========================

dwite / dwite.py
----------------
Bootstrap. Controls whole system liveness. (Note that content managers
must be started separately.)

wire.py / protocol.py
---------------------
The SlimWire class handles all sending and receiving of SlimProto messages
over the wire.
The JsonWire class handles all communication with content managers.
The protocol classes are split into Commands and Messages, where messages
can come from a device or a content manager. Commands are used to tell a
device what to do.

Device
------
The topmost container that holds all state pertaining to a physical device.
Some state is left out and must be specified in subclasses. There is, for
instance, no "display" member because some models don't have one. A Device
is essentially the main loop of the program. All that goes on in dwite.py
is just a bootstrap to get everything up and running.

Classic(Device)
---------------
Subclass of Device that handles the "classic" model, including the "SB2" and
"SB3" models previously sold by SlimDevices. All display updates are driven
by a ticker that wakes up 50 times per second. When it does, a display render
will be chosen based on the current state of the device and its .ticker()
function will be called. This allows for relatively easy construction of
rendering logic that is well contained and can do pretty much whatever it
wants with the display. There is never more than one render active at any
time, but new renders can be created that combine functionality from existing
ones to produce complex visual effects.

tactile.py
----------
Currently only contains IR code definitions for the SB2/SB3 remote control. I
chose the name "tactile" rather than "remote" because e.g. the Trasporter has
a bunch of buttons on the device itself. I.e. tactile but not remote buttons.
Such buttons should eventually be mapped up in here as well.

Display
-------
A container class that represents the box's display. It knows how to send
bitmaps to a physical display and handles intrinsics such as brightness and
transition styles (i.e. scroll and bump). Visualization control will go in
here at some point. Graphics that require host-side rendering don't belong
in this class.

Menu
----
Uses a set of classes that represent various kinds of tree nodes. The topmost
tree class just contains a label (to show on a Display) and a reference
"upwards" to a parent node.

Subclasses of the Tree class are used to represent file system directories,
info about media files, screen savers and all kinds of stuff. Container
classes must implement the ls() method.

Given a bunch of container and leaf nodes, the Menu can browse the content by
entering & leaving containers, et.c. The currently displayed entry is tracked
with an index against its container's array of children. When a container is
left, the label of the container is searched for in the parent node to find
the new index value.

Tree nodes are expected to know which render object to use when visualizing
themselves.

The most important class member is perhaps tick(), which has to be called
periodically to drive any render pipelines that Menu nodes have set up.

IMPORTANT DESIGN DECISION: Much of the functionality that a user can interact
with is implemented as specialized menu entries. Many tactile codes are passed
on to the currently active Menu item to let the item add special handling of
tactile events. There is, for instance, a class Searcher which interprets the
numeric keys on the remote in T9 style and looks up possible completions in a
dictionary. (The dictionary contains any terms that content managers have sent
in.) This way, the user can quickly build a phrase of search terms that can be
passed off to content managers.

Canvas
------
Uses PIL classes to draw and manipulate bitmaps that can be sent to a device.
Its primary purpose is to transform bitmaps to draw correctly on screeen. At
some point it may be interesting to create abstractions for image compositing
in here as well.

Render
------
Timekeeping Canvas user. Must be subclassed. All subclasses must implement
the tick() method. tick() must be called periodically while the render is
active. Look at the TextRender subclass for a reasonably simple example (it
automatically scrolls strings that are too long to fit on the Canvas).

player.py
---------
The Player and NowPlaying classes implement handlers for the playback related
buttons on the remote and keep track of the playback status messages that come
in from a device. They also handle volume control (which is definitely buggy).

cleo / cleo.py
--------------
Liveness control of a minimalistic content manager that runs as a separate
program. It communicates with Dwite by sending JSON formatted messages over
a TCP socket (using the JsonWire class, discussed earlier). If you want to
build a content manager (such as a SqueezeBox plugin for your favourite media
player), start by looking at the RPC API that Cleo implements.

Cleo doesn't really know anything about storage backends and must import a
Backend class that understands such things. Currently it imports a horrid hack
that tries to interact with a Banshee database. Patches to turn Cleo into a
clean and useful foundation for further work would be greatly appreciated. I
focus on the device management and I'm not too bothered by the fact that Cleo
doesn't really work.

streamer.py
-----------
Used by the content manager to respond to HTTP GET requests from the device.
Also contains a super simple MP3 "decoder" class. The decoder doesn't unpack
the MP3 contents into PCM frames or anything like that; It merely maps time
seeks to file offsets. I.e. if the device asks for a particular track and a
time offset, the streamer will dig up the corresponding file and decode the
file offset to start from. It probably does this incorrectly for variable bit
rate songs.

Basically, a full interaction "cycle" between device manager, device, streamer
and content manager can be characterized like this:

 * The content manager answers an Ls request from the device manager.
 * The device manager uses the Ls response to create menu entries.
 * The user presses play when a menu entry is focused.
 * The device manager tells the device to fetch a GUID that corresponds to
   the menu item that was focused when the user pressed play. It also tells
   the device what kind of content to expect when the streaming starts, at
   what address:port the streamer i located, and other little bits. Check the
   Strm class in protocol.py.
 * The device cooks an HTTP GET request and sends it to the address:port that
   the device manager just told it about.
 * The streamer receives the request. Because it is built into the content
   manager that told the device manager about content identifiers in the first
   place, it is able to translate the requested GUID into an actual file to
   stream.
 * The streamer sends the file, little by little.
 * The device manager produces Stat messages during playback and sends them to
   the device manager.
 * The device manager uses the Stat messages to update the display on the
   device. Or it could post them to an IRC channel or what-not.

HAPPY HACKING!
